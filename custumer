<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard การวิเคราะห์พฤติกรรมผู้บริโภค</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@400;500;700&display=swap');
        body {
            font-family: 'Sarabun', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 1200px;
        }
        .card {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            transition: transform 0.2s ease-in-out;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card-title {
            color: #4b5563;
            font-size: 1.25rem;
            font-weight: 500;
        }
        .card-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1f2937;
        }
        .table-container {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            overflow-x: auto;
        }
        .table-container table {
            width: 100%;
            border-collapse: collapse;
        }
        .table-container th, .table-container td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }
        .table-container th {
            background-color: #f9fafb;
            font-weight: 600;
            color: #4b5563;
            white-space: nowrap;
        }
        .table-container tr:hover {
            background-color: #f3f4f6;
        }
        .search-input {
            width: 100%;
            padding: 12px 16px;
            border-radius: 8px;
            border: 1px solid #d1d5db;
            margin-bottom: 20px;
            font-size: 1rem;
            color: #1f2937;
            transition: all 0.2s ease-in-out;
        }
        .search-input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            height: 8px;
        }
        ::-webkit-scrollbar-thumb {
            background-color: #d1d5db;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-track {
            background-color: #f3f4f6;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="p-6">
    <div class="container mx-auto">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-8">Dashboard การวิเคราะห์พฤติกรรมผู้บริโภค</h1>
        
        <!-- Loading and Error Messages -->
        <div id="statusMessage" class="text-center text-lg font-medium text-gray-600 my-8">กำลังโหลดข้อมูล...</div>
        <div id="errorMessage" class="text-center text-lg font-medium text-red-600 my-8 hidden">ไม่สามารถโหลดข้อมูลได้ กรุณาตรวจสอบลิงก์และสิทธิ์การเข้าถึง</div>

        <!-- Dashboard Content -->
        <div id="dashboardContent" class="hidden">
            <!-- Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div class="card">
                    <div class="card-title">จำนวนผู้ใช้งานทั้งหมด</div>
                    <div id="total-users" class="card-value text-green-600">...</div>
                </div>
                <div class="card">
                    <div class="card-title">ความพึงพอใจเฉลี่ย</div>
                    <div id="avg-satisfaction" class="card-value text-blue-600">...</div>
                </div>
            </div>

            <!-- Bar Chart -->
            <div class="table-container mb-8">
                <h2 class="text-xl font-bold text-gray-800 mb-4">จำนวนผู้ใช้งานในแต่ละแพลตฟอร์ม</h2>
                <canvas id="platformChart" class="p-4"></canvas>
            </div>

            <!-- Data Table -->
            <div class="table-container">
                <h2 class="text-xl font-bold text-gray-800 mb-4">ข้อมูลทั้งหมด</h2>
                <input type="text" id="searchInput" class="search-input" placeholder="ค้นหาข้อมูลในตารางทั้งหมด...">
                <div class="overflow-x-auto">
                    <table id="dataTable" class="min-w-full">
                        <thead>
                            <tr></tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
        
    </div>

    <script>
        window.onload = async function() {
            const GOOGLE_SHEET_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vR-JjnopFFe32Nffemd1b0jDk0IkuJBwNVqLT_mbXE30a1-GZKZzCYEBA9GHw2RDmJaTp6roF4lr_3_/pub?gid=0&single=true&output=csv';
            const statusMessage = document.getElementById('statusMessage');
            const errorMessage = document.getElementById('errorMessage');
            const dashboardContent = document.getElementById('dashboardContent');

            try {
                // Fetch data from the hardcoded Google Sheet URL
                const response = await fetch(GOOGLE_SHEET_URL);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const csvText = await response.text();
                const data = parseCsvData(csvText);

                if (data && data.length > 0) {
                    renderDashboard(data);
                    statusMessage.classList.add('hidden');
                    dashboardContent.classList.remove('hidden');
                } else {
                    throw new Error('No data found or invalid data format.');
                }
            } catch (error) {
                statusMessage.classList.add('hidden');
                errorMessage.classList.remove('hidden');
                console.error('Error:', error);
            }
        };

        function parseCsvData(csvText) {
            // Parse CSV text into an array of objects
            const rows = csvText.trim().split('\n');
            if (rows.length <= 1) return [];

            const headers = rows[0].split(',').map(header => header.trim().replace(/"/g, ''));
            const data = rows.slice(1).map(row => {
                const values = row.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/).map(value => value.trim().replace(/"/g, ''));
                const obj = {};
                headers.forEach((header, i) => {
                    obj[header] = values[i];
                });
                return obj;
            });
            return data;
        }

        function renderDashboard(data) {
            if (data.length === 0) {
                document.getElementById('total-users').textContent = 'N/A';
                document.getElementById('avg-satisfaction').textContent = 'N/A';
                return;
            }

            // --- Calculate and display card data ---
            const totalUsers = data.length;
            const totalSatisfaction = data.reduce((sum, row) => sum + parseFloat(row.satisfaction_score), 0);
            const avgSatisfaction = (totalSatisfaction / totalUsers).toFixed(2);

            document.getElementById('total-users').textContent = totalUsers.toLocaleString();
            document.getElementById('avg-satisfaction').textContent = avgSatisfaction;

            // --- Prepare and display bar chart ---
            const platformCounts = data.reduce((acc, row) => {
                acc[row.preferred_platform] = (acc[row.preferred_platform] || 0) + 1;
                return acc;
            }, {});

            const chartLabels = Object.keys(platformCounts);
            const chartData = Object.values(platformCounts);
            const colors = ['#2563eb', '#3b82f6', '#60a5fa', '#93c5fd', '#bfdbfe', '#dbeafe'];

            const existingChart = Chart.getChart('platformChart');
            if (existingChart) {
                existingChart.destroy();
            }

            const ctx = document.getElementById('platformChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'จำนวนผู้ใช้งาน',
                        data: chartData,
                        backgroundColor: colors.slice(0, chartLabels.length),
                        borderColor: colors.slice(0, chartLabels.length).map(c => c.replace('1)', '1.3)')),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                        },
                        title: {
                            display: true,
                            text: 'จำนวนผู้ใช้งานในแต่ละแพลตฟอร์ม',
                            font: {
                                size: 16,
                                family: 'Sarabun'
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'จำนวนผู้ใช้งาน',
                                font: {
                                    family: 'Sarabun'
                                }
                            },
                            ticks: {
                                stepSize: 1
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'แพลตฟอร์ม',
                                font: {
                                    family: 'Sarabun'
                                }
                            }
                        }
                    }
                }
            });

            // --- Prepare and display data table with filter ---
            const tableHead = document.querySelector('#dataTable thead tr');
            const tableBody = document.querySelector('#dataTable tbody');
            tableHead.innerHTML = '';
            tableBody.innerHTML = '';

            const headers = Object.keys(data[0]);
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header.replace(/_/g, ' ').toUpperCase();
                tableHead.appendChild(th);
            });

            function renderTable(filteredData) {
                tableBody.innerHTML = '';
                filteredData.forEach(row => {
                    const tr = document.createElement('tr');
                    headers.forEach(header => {
                        const td = document.createElement('td');
                        td.textContent = row[header];
                        tr.appendChild(td);
                    });
                    tableBody.appendChild(tr);
                });
            }
            
            renderTable(data);

            const searchInput = document.getElementById('searchInput');
            const newSearchInput = searchInput.cloneNode(true);
            searchInput.parentNode.replaceChild(newSearchInput, searchInput);
            
            newSearchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                const filteredData = data.filter(row => {
                    return Object.values(row).some(value => {
                        return String(value).toLowerCase().includes(searchTerm);
                    });
                });
                renderTable(filteredData);
            });
        }
    </script>
</body>
</html>
